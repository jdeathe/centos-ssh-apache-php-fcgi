#!/usr/bin/env bash

source /etc/apache-bootstrap.conf

add_hosts_entry ()
{
	local IP=${1:-127.0.0.1}
	local HOSTS
	local USAGE="Usage: $0 ip_address hostname [hostname ...]"

	shift
	if [[ ${#} -eq 0 ]]; then
		echo ${USAGE}
		exit 1
	fi

	while (( ${#} )); do
		if [[ ${1} != 'localhost' ]] && [[ ${1} != '127.0.0.1' ]] && [[ ${1} != ${IP} ]]; then
			HOSTS+=" ${1}"
		fi
		shift
	done

	printf -- "%s\t%s\n" "${IP}" "${HOSTS}" >> /etc/hosts
}

get_password ()
{
	echo $(head -n 4096 /dev/urandom | tr -cd '[:alnum:]' | head -c ${1})
}

set_apache_server_name ()
{
	local HOST_NAME=${1:-${APACHE_SERVER_NAME:-$(hostname)}}
	local PORT=${2:-80}

	sed -i \
		-e "s~^#ServerName \(.*\):80$~ServerName ${HOST_NAME}:${PORT}~g" \
		/etc/httpd/conf/httpd.conf
}

APP_HOME_DIR_TEMPLATE="/var/www/.app-skel"

OPTS_APACHE_SERVER_ALIAS="${APACHE_SERVER_ALIAS:-}"
OPTS_APACHE_SERVER_NAME="${APACHE_SERVER_NAME:-$(hostname)}"
OPTS_APACHE_LOAD_MODULES="${APACHE_LOAD_MODULES:-authz_user_module log_config_module expires_module deflate_module headers_module setenvif_module mime_module status_module dir_module alias_module reqtimeout_module}"
OPTS_APACHE_MOD_SSL_ENABLED="${APACHE_MOD_SSL_ENABLED:-false}"
OPTS_APP_HOME_DIR="${APP_HOME_DIR:-/var/www/app}"
OPTS_SERVICE_USER="${SERVICE_USER:-app}"
OPTS_SERVICE_USER_GROUP="${SERVICE_USER_GROUP:-app-www}"
OPTS_SERVICE_USER_GROUP_PASSWORD="${SERVICE_USER_GROUP_PASSWORD:-$(get_password 8)}"
OPTS_SERVICE_USER_PASSWORD="${SERVICE_USER_PASSWORD:-$(get_password 8)}"
OPTS_SUEXECUSERGROUP="${SUEXECUSERGROUP:-false}"

if [[ ! -d ${OPTS_APP_HOME_DIR} ]] && [[ -d ${APP_HOME_DIR_TEMPLATE} ]]; then
	echo "Recreate the ${OPTS_APP_HOME_DIR} directory."
	mkdir -p ${OPTS_APP_HOME_DIR}
fi

if [[ -z $(find ${OPTS_APP_HOME_DIR} -maxdepth 1 -type f) ]] && [[ -d ${APP_HOME_DIR_TEMPLATE} ]]; then
	echo "Home directory ${OPTS_APP_HOME_DIR} is empty - populate it using ${APP_HOME_DIR_TEMPLATE}."
	cp -rf ${APP_HOME_DIR_TEMPLATE}/. ${OPTS_APP_HOME_DIR}/
fi

# Document root directory is required
if [[ ! -d ${OPTS_APP_HOME_DIR}/public_html ]]; then
	echo "ERROR: ${OPTS_APP_HOME_DIR}/public_html not found."
	exit 1
fi

if [[ ${OPTS_APP_HOME_DIR} != /var/www/app ]]; then
	unlink /home/app && ln -s ${OPTS_APP_HOME_DIR} /home/app
fi

# Server MPM
HTTPD_MPM_PREFORK=/usr/sbin/httpd
HTTPD_MPM_WORKER=/usr/sbin/httpd.worker
HTTPD=${HTTPD:-${HTTPD_MPM_PREFORK}}
if [[ ${HTTPD} == ${HTTPD_MPM_PREFORK} ]]; then
	echo "Apache Server MPM: Prefork"
	sed -i \
	-e "s~HTTPD=${HTTPD_MPM_WORKER}~#HTTPD=${HTTPD_MPM_WORKER}~g" \
	/etc/sysconfig/httpd
elif [[ ${HTTPD} == ${HTTPD_MPM_WORKER} ]]; then
	echo "Apache Server MPM: Worker"
	sed -i \
	-e "s~#HTTPD=${HTTPD_MPM_WORKER}~HTTPD=${HTTPD_MPM_WORKER}~g" \
	/etc/sysconfig/httpd
else
	echo "ERROR: Apache Server MPM (${HTTPD}) unknown."
	exit 1
fi

# Add local hosts entries
add_hosts_entry 127.0.0.1 ${OPTS_APACHE_SERVER_NAME}${OPTS_APACHE_SERVER_ALIAS:+ }${OPTS_APACHE_SERVER_ALIAS}

# Add ServerName
set_apache_server_name ${OPTS_APACHE_SERVER_NAME} 80

# If users need to change the vhost.conf the SSL version can be rebuilt if it is deleted
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]] && [[ ! -f ${OPTS_APP_HOME_DIR}/vhost-ssl.conf ]] && [[ -f ${OPTS_APP_HOME_DIR}/vhost.conf ]]; then
	echo "Rebuilding the SSL VirtualHost configuration."
	cp -pf ${OPTS_APP_HOME_DIR}/vhost.conf ${OPTS_APP_HOME_DIR}/vhost-ssl.conf

	# Enable the SSL VirtualHosts configuration
	sed -i \
		-e 's~^<VirtualHost \*:80 \*:8443>$~<VirtualHost \*:443>~g' \
		-e '/<IfModule mod_ssl.c>/,/<\/IfModule>/ s~^#~~' \
		${OPTS_APP_HOME_DIR}/vhost-ssl.conf
fi

# Enable/Disable SSL support
if [[ ${OPTS_APACHE_MOD_SSL_ENABLED} == true ]]; then
	echo "Enabling SSL support."
	cat /etc/httpd/conf.d/ssl.conf.off > /etc/httpd/conf.d/ssl.conf

	if [[ ! -f /etc/services-config/ssl/private/localhost.key ]] || [[ ! -f /etc/services-config/ssl/certs/localhost.crt ]]; then
		echo "Generating new certificate."
		openssl req \
			-x509 \
			-nodes \
			-newkey rsa:4096 \
			-days 365 \
			-subj "/C=--/ST=STATE/L=LOCALITY/O=ORGANIZATION/CN=${OPTS_APACHE_SERVER_NAME}" \
			-keyout /etc/services-config/ssl/private/localhost.key \
			-out /etc/services-config/ssl/certs/localhost.crt
	fi

	openssl x509 -in /etc/services-config/ssl/certs/localhost.crt -text
else
	echo "Disabling SSL support."
	> /etc/httpd/conf.d/ssl.conf
fi

# Set the service user / service group user
if getent passwd app && [[ ${OPTS_SERVICE_USER} != app ]]; then
	usermod -l ${OPTS_SERVICE_USER} app
fi

if getent passwd app-www && [[ ${OPTS_SERVICE_USER_GROUP} != app-www ]]; then
	usermod -l ${OPTS_SERVICE_USER_GROUP} app-www
fi

# Set the Apache (run) service user/group
if [[ ${OPTS_SUEXECUSERGROUP} == true ]]; then
	sed -i \
		-e "s~^User .*$~User ${OPTS_SERVICE_USER_GROUP}~g" \
		-e "s~^Group .*$~Group ${OPTS_SERVICE_USER_GROUP}~g" \
		/etc/httpd/conf/httpd.conf
	sed -i \
		-e 's~#SuexecUserGroup \(.*\)$~SuexecUserGroup \1~g' \
		-e 's~app/bin/php-wrapper~app-bin/php-wrapper~g' \
		${OPTS_APP_HOME_DIR}/vhost.conf \
		${OPTS_APP_HOME_DIR}/vhost-ssl.conf
	chown -R 502:502 /var/{www/app-bin,run/mod_fcgid}
else
	sed -i \
		-e "s~^User .*$~User apache~g" \
		-e "s~^Group .*$~Group apache~g" \
		/etc/httpd/conf/httpd.conf
	sed -i \
		-e 's~\([^#]\)SuexecUserGroup \(.*\)$~\1#SuexecUserGroup \2~g' \
		-e 's~app/bin/php-wrapper~app-bin/php-wrapper~g' \
		${OPTS_APP_HOME_DIR}/vhost.conf \
		${OPTS_APP_HOME_DIR}/vhost-ssl.conf
	chown -R apache:apache /var/{www/app-bin,run/mod_fcgid}
fi

echo "Loading Apache modules."
for MODULE in ${APACHE_LOAD_MODULES}; do
	echo " - ${MODULE}"
	sed -i \
		-e "s~^#LoadModule ${MODULE} ~LoadModule ${MODULE} ~g" \
		/etc/httpd/conf/httpd.conf
done

# Set user passwords
echo "${OPTS_SERVICE_USER}:${OPTS_SERVICE_USER_PASSWORD}" | chpasswd
echo "${OPTS_SERVICE_USER_GROUP}:${OPTS_SERVICE_USER_GROUP_PASSWORD}" | chpasswd

	cat <<-EOT

		================================================================================
		Apache Credentials
		--------------------------------------------------------------------------------
		${OPTS_SERVICE_USER} : ${OPTS_SERVICE_USER_PASSWORD}
		${OPTS_SERVICE_USER_GROUP} : ${OPTS_SERVICE_USER_GROUP_PASSWORD}
		--------------------------------------------------------------------------------
		
	EOT

exit 0