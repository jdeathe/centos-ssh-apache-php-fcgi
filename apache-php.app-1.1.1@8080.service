# -----------------------------------------------------------------------------
# Create a data container for the configuration volume: 
#     docker run -v /config --name volume-config.<service-name> busybox /bin/true
#
# Optional configuration volume install: 
#     mkdir -p /etc/services-config/<service-name>/{httpd,supervisor,ssl/{certs,private}}
#     cp <container-path>/etc/services-config/supervisor/supervisord.conf /etc/services-config/<service-name>/supervisor/supervisord.conf
#     cp <container-path>/etc/services-config/httpd/conf/httpd.conf /etc/services-config/<service-name>/httpd/conf/httpd.conf
#     cp <container-path>/etc/services-config/httpd/conf.d/php.conf /etc/services-config/<service-name>/httpd/conf.d/php.conf
#     cp <container-path>/etc/services-config/httpd/conf.d/ssl.conf /etc/services-config/<service-name>/httpd/conf.d/ssl.conf
#
# To install: 
#     sudo cp <container-path>/<service-name>@<port>.service /etc/systemd/system/
#     sudo systemctl daemon-reload
#     sudo systemctl enable /etc/systemd/system/<service-name>@<port>.service
# 
# Start using: 
#     sudo systemctl restart <service-name>@<port>.service
# -----------------------------------------------------------------------------

[Unit]
Description=CentOS-6 / Apache / PHP (FastCGI) // app-1.1.1
After=etcd2.service
After=docker.service
Requires=docker.service
Requires=etcd2.service

[Service]
Restart=on-failure
RestartSec=30
TimeoutStartSec=1200
Environment="MOUNT_PATH_CONFIG=/etc/services-config"
Environment="MOUNT_PATH_DATA=/var/services-data"
Environment="DOCKER_IMAGE_NAME=jdeathe/centos-ssh-apache-php-fcgi"
Environment="DOCKER_IMAGE_TAG=centos-6-1.4.0"

# Create a data container for the configuration volume
ExecStartPre=/bin/sudo /bin/bash -c \
  "if [[ busybox != $(/usr/bin/docker images | /bin/grep -e '^busybox[ ]\{1,\}' | /bin/grep -o 'busybox') ]]; then \
    if [[ -f /var/services-packages/busybox.latest-1.0.0.tar.xz ]]; then \
      /usr/bin/xz /var/services-packages/busybox.latest-1.0.0.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull busybox:latest; \
    fi; \
  fi; \
  if [[ -n $(/usr/bin/find ${MOUNT_PATH_CONFIG}/%p/supervisor -maxdepth 1 -type f) ]] && [[ -n $(/usr/bin/find ${MOUNT_PATH_CONFIG}/%p/httpd -maxdepth 1 -type f) ]]; then \
    if [[ volume-config.%p != $(/usr/bin/docker ps -a | /bin/awk -v pattern='^volume-config.%p$' '$NF ~ pattern { print $NF; }') ]]; then \
      /usr/bin/docker run \
        --name volume-config.%p \
        -v ${MOUNT_PATH_CONFIG}/ssh.pool-1/ssh:/etc/services-config/ssh \
        -v ${MOUNT_PATH_CONFIG}/%p/supervisor:/etc/services-config/supervisor \
        -v ${MOUNT_PATH_CONFIG}/%p/httpd:/etc/services-config/httpd \
        -v ${MOUNT_PATH_CONFIG}/%p/ssl/certs:/etc/services-config/ssl/certs \
        -v ${MOUNT_PATH_CONFIG}/%p/ssl/private:/etc/services-config/ssl/private \
        busybox:latest \
        /bin/true; \
    fi; \
  fi"

# Initialisation: Pull or build image if required
ExecStartPre=/bin/sudo /bin/bash -c \
  "if [[ ${DOCKER_IMAGE_NAME} != $(/usr/bin/docker images | /bin/grep -e \\\"^${DOCKER_IMAGE_NAME}[ ]\{1,\}\\\" | /bin/grep -o \\\"${DOCKER_IMAGE_NAME}\\\") ]]; then \
    if [[ -f /var/services-packages/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz ]]; then \
      /usr/bin/xz -dc /var/services-packages/${DOCKER_IMAGE_NAME}.${DOCKER_IMAGE_TAG}.tar.xz | /usr/bin/docker load; \
    else \
      /usr/bin/docker pull ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
    fi; \
  fi"

# Startup: Remove existing container (and stop if running) so it is re-created on startup but not removed on exit - to allow debugging if required
ExecStart=/bin/sudo /bin/bash -c \
  "if [[ %p == $(/usr/bin/docker ps -a | /bin/awk -v pattern='^%p$' '$NF ~ pattern { print $NF; }') ]]; then \
    if [[ %p == $(/usr/bin/docker ps | /bin/awk -v pattern='^%p$' '$NF ~ pattern { print $NF; }') ]]; then \
      /usr/bin/docker stop %p; \
    fi; \
    /usr/bin/docker rm %p; \
  fi; \
  if [[ volume-config.%p == $(/usr/bin/docker ps -a | /bin/awk -v pattern='^volume-config.%p$' '$NF ~ pattern { print $NF; }') ]]; then \
    /usr/bin/docker run \
      --name %p \
      -p %i:80 \
      -p 8580:8443 \
      --env SERVICE_UNIT_INSTANCE=app-1 \
      --env SERVICE_UNIT_LOCAL_ID=1 \
      --env SERVICE_UNIT_INSTANCE=1 \
      --env APACHE_SERVER_NAME=app-1.local \
      --env APACHE_SERVER_ALIAS=app-1 \
      --env DATE_TIMEZONE=UTC \
      --volumes-from volume-config.%p \
      -v ${MOUNT_PATH_DATA}/apache-php/app-1:/var/www/app \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  else \
    /usr/bin/docker run \
      --name %p \
      -p %i:80 \
      -p 8580:8443 \
      --env SERVICE_UNIT_INSTANCE=app-1 \
      --env SERVICE_UNIT_LOCAL_ID=1 \
      --env SERVICE_UNIT_INSTANCE=1 \
      --env APACHE_SERVER_NAME=app-1.local \
      --env APACHE_SERVER_ALIAS=app-1 \
      --env DATE_TIMEZONE=UTC \
      -v ${MOUNT_PATH_DATA}/apache-php/app-1:/var/www/app \
      ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}; \
  fi"

ExecStartPost=/usr/bin/etcdctl set /services/apache-php/app-1/1.1 %H:%i

ExecStop=/usr/bin/docker stop --time 10 %p
ExecStopPost=/usr/bin/etcdctl rm /services/apache-php/app-1/1.1

[Install]
WantedBy=multi-user.target